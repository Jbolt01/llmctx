name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  governance-lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Run fmt check
        id: fmt
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          cargo fmt --all -- --check 2>&1 | tee fmt.log
      - name: Upload fmt log
        if: steps.fmt.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: fmt-log
          path: fmt.log
      - name: Fail on formatting issues
        if: steps.fmt.outcome == 'failure'
        run: exit 1
      - name: Clippy (annotate in PR)
        id: clippy
        continue-on-error: true
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings
      - name: Collect clippy log
        if: steps.clippy.outcome == 'failure'
        continue-on-error: true
        shell: bash
        run: |
          cargo clippy --all-targets --all-features -- -D warnings 2>&1 | tee clippy.log
      - name: Upload clippy log
        if: steps.clippy.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: clippy-log
          path: clippy.log
      - name: Fail on clippy issues
        if: steps.clippy.outcome == 'failure'
        run: exit 1
      - name: Job summary
        run: |
          {
            echo "## Lint summary";
            echo "- cargo fmt --all -- --check";
            echo "  - log: fmt-log (only on failure)";
            echo "- cargo clippy --all-targets --all-features";
            echo "  - annotations via clippy-check";
            echo "  - log: clippy-log (only on failure)";
          } >> "$GITHUB_STEP_SUMMARY"

  governance-test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: governance-lint
    strategy:
      matrix:
        profile: [dev, release]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: test-${{ matrix.profile }}
      - name: Install tooling
        run: |
          if ! command -v cargo2junit >/dev/null 2>&1; then
            cargo install cargo2junit --locked
          fi
      - name: Prepare integration fixtures
        run: |
          mkdir -p target/test-fixtures
          echo "{}" > target/test-fixtures/default-config.json
      - name: Run tests (dev profile)
        if: matrix.profile == 'dev'
        run: |
          set -eo pipefail
          cargo test --all-features --no-fail-fast -- --format json --report-time \
            | tee target/cargo-test-dev.json \
            | cargo2junit > target/dev-junit.xml
      - name: Run tests (release profile)
        if: matrix.profile == 'release'
        env:
          RUSTFLAGS: "-C debuginfo=0"
        run: |
          set -eo pipefail
          cargo test --all-features --release --no-fail-fast -- --format json --report-time \
            | tee target/cargo-test-release.json \
            | cargo2junit > target/release-junit.xml
      - name: Archive test logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.profile }}
          path: |
            target/cargo-test-${{ matrix.profile }}.json
            target/${{ matrix.profile }}-junit.xml
          if-no-files-found: ignore
      - name: Upload junit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.profile }}
          path: target/${{ matrix.profile }}-junit.xml
          if-no-files-found: ignore
      - name: Job summary
        run: |
          {
            echo "## Test summary (${{ matrix.profile }})";
            if [ "${{ matrix.profile }}" = "dev" ]; then
              echo "- cargo test --all-features --no-fail-fast -- --format json --report-time";
              echo "- raw log: cargo-test-dev.json";
              echo "- junit artifact: junit-dev";
            else
              echo "- cargo test --all-features --release --no-fail-fast -- --format json --report-time";
              echo "- raw log: cargo-test-release.json";
              echo "- junit artifact: junit-release";
            fi;
          } >> "$GITHUB_STEP_SUMMARY"

  governance-build:
    name: Release Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - governance-test
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build release artifacts
        run: cargo build --workspace --release
      - name: Job summary
        run: |
          {
            echo "## Build summary";
            echo "- cargo build --workspace --release";
          } >> "$GITHUB_STEP_SUMMARY"

  governance-security:
    name: Security & Compliance (Placeholder)
    runs-on: ubuntu-latest
    needs:
      - governance-build
    steps:
      - name: Acknowledge pending security automation
        run: |
          echo "Security scanning to be implemented in Issue #18." >> "$GITHUB_STEP_SUMMARY"
